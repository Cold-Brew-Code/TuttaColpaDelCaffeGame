name: Generate and Deploy Javadoc

# ATTIVAZIONE: Questo workflow si esegue a ogni push sul branch 'main'.
# Un merge è a tutti gli effetti un push, quindi questo copre il tuo caso d'uso.
on:
  push:
    branches:
      - main

jobs:
  generate-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      # 1. Fa il checkout del codice di 'main' all'ultimo commit.
      # Non c'è più ambiguità sul branch, siamo sicuramente su main.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Imposta l'ambiente Java (JDK 21)
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # 3. Genera la Javadoc
      - name: Generate Javadoc with Maven
        run: mvn clean javadoc:javadoc
        working-directory: ./adventure

      # 4. Esegue il commit e il push dei file generati
      - name: Commit and push Javadoc
        run: |
          # Questa configurazione è necessaria perché il workflow esegua il commit
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions-bot@github.com"
          
          # Aggiunge i file e fa il commit SOLO se ci sono stati cambiamenti
          git add docs
          git diff-index --quiet HEAD || git commit -m "docs: Generate and update Javadoc [ci skip]"
          
          # Invia il commit al branch 'main'
          git push